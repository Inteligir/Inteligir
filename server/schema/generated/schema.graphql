### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

input ArticleCreateManyWithoutArticlesInput {
  connect: [ArticleWhereUniqueInput!]
  create: [ArticleCreateWithoutAuthorInput!]
}

input ArticleCreateWithoutAuthorInput {
  createdAt: DateTime
  description: String!
  id: ID
  link: String
  playlist: PlaylistCreateOneWithoutPlaylistInput!
  title: String!
  type: ArticleType!
  updatedAt: DateTime
}

input ArticleCreateWithoutPlaylistInput {
  author: UserCreateOneWithoutAuthorInput!
  createdAt: DateTime
  description: String!
  id: ID
  link: String
  title: String!
  type: ArticleType!
  updatedAt: DateTime
}

input ArticleFilter {
  every: ArticleWhereInput
  none: ArticleWhereInput
  some: ArticleWhereInput
}

input ArticleScalarWhereInput {
  AND: [ArticleScalarWhereInput!]
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  link: NullableStringFilter
  NOT: [ArticleScalarWhereInput!]
  OR: [ArticleScalarWhereInput!]
  title: StringFilter
  type: ArticleType
  updatedAt: DateTimeFilter
}

enum ArticleType {
  LINK
  POST
  VIDEO
}

input ArticleUpdateManyDataInput {
  createdAt: DateTime
  description: String
  id: ID
  link: String
  title: String
  type: ArticleType
  updatedAt: DateTime
}

input ArticleUpdateManyWithoutAuthorInput {
  connect: [ArticleWhereUniqueInput!]
  create: [ArticleCreateWithoutAuthorInput!]
  delete: [ArticleWhereUniqueInput!]
  deleteMany: [ArticleScalarWhereInput!]
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  update: [ArticleUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ArticleUpdateManyWithWhereNestedInput!]
  upsert: [ArticleUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ArticleUpdateManyWithoutPlaylistInput {
  connect: [ArticleWhereUniqueInput!]
  create: [ArticleCreateWithoutPlaylistInput!]
  delete: [ArticleWhereUniqueInput!]
  deleteMany: [ArticleScalarWhereInput!]
  disconnect: [ArticleWhereUniqueInput!]
  set: [ArticleWhereUniqueInput!]
  update: [ArticleUpdateWithWhereUniqueWithoutPlaylistInput!]
  updateMany: [ArticleUpdateManyWithWhereNestedInput!]
  upsert: [ArticleUpsertWithWhereUniqueWithoutPlaylistInput!]
}

input ArticleUpdateManyWithWhereNestedInput {
  data: ArticleUpdateManyDataInput!
  where: ArticleScalarWhereInput!
}

input ArticleUpdateWithoutAuthorDataInput {
  createdAt: DateTime
  description: String
  id: ID
  link: String
  playlist: PlaylistUpdateOneRequiredWithoutArticlesInput
  title: String
  type: ArticleType
  updatedAt: DateTime
}

input ArticleUpdateWithoutPlaylistDataInput {
  author: UserUpdateOneRequiredWithoutArticlesInput
  createdAt: DateTime
  description: String
  id: ID
  link: String
  title: String
  type: ArticleType
  updatedAt: DateTime
}

input ArticleUpdateWithWhereUniqueWithoutAuthorInput {
  data: ArticleUpdateWithoutAuthorDataInput!
  where: ArticleWhereUniqueInput!
}

input ArticleUpdateWithWhereUniqueWithoutPlaylistInput {
  data: ArticleUpdateWithoutPlaylistDataInput!
  where: ArticleWhereUniqueInput!
}

input ArticleUpsertWithWhereUniqueWithoutAuthorInput {
  create: ArticleCreateWithoutAuthorInput!
  update: ArticleUpdateWithoutAuthorDataInput!
  where: ArticleWhereUniqueInput!
}

input ArticleUpsertWithWhereUniqueWithoutPlaylistInput {
  create: ArticleCreateWithoutPlaylistInput!
  update: ArticleUpdateWithoutPlaylistDataInput!
  where: ArticleWhereUniqueInput!
}

input ArticleWhereInput {
  AND: [ArticleWhereInput!]
  author: UserWhereInput
  createdAt: DateTimeFilter
  description: StringFilter
  id: StringFilter
  link: NullableStringFilter
  NOT: [ArticleWhereInput!]
  OR: [ArticleWhereInput!]
  playlist: PlaylistWhereInput
  title: StringFilter
  type: ArticleType
  updatedAt: DateTimeFilter
}

input ArticleWhereUniqueInput {
  id: ID
}

type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

input CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput {
  connect: [CompletedPlaylistWhereUniqueInput!]
  create: [CompletedPlaylistCreateWithoutCompletedByInput!]
}

input CompletedPlaylistCreateWithoutCompletedByInput {
  createdAt: DateTime
  id: ID
  playlist: PlaylistCreateOneWithoutPlaylistInput!
  updatedAt: DateTime
}

input CompletedPlaylistCreateWithoutPlaylistInput {
  completedBy: UserCreateOneWithoutCompletedByInput!
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input CompletedPlaylistFilter {
  every: CompletedPlaylistWhereInput
  none: CompletedPlaylistWhereInput
  some: CompletedPlaylistWhereInput
}

input CompletedPlaylistScalarWhereInput {
  AND: [CompletedPlaylistScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [CompletedPlaylistScalarWhereInput!]
  OR: [CompletedPlaylistScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input CompletedPlaylistUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input CompletedPlaylistUpdateManyWithoutCompletedByInput {
  connect: [CompletedPlaylistWhereUniqueInput!]
  create: [CompletedPlaylistCreateWithoutCompletedByInput!]
  delete: [CompletedPlaylistWhereUniqueInput!]
  deleteMany: [CompletedPlaylistScalarWhereInput!]
  disconnect: [CompletedPlaylistWhereUniqueInput!]
  set: [CompletedPlaylistWhereUniqueInput!]
  update: [CompletedPlaylistUpdateWithWhereUniqueWithoutCompletedByInput!]
  updateMany: [CompletedPlaylistUpdateManyWithWhereNestedInput!]
  upsert: [CompletedPlaylistUpsertWithWhereUniqueWithoutCompletedByInput!]
}

input CompletedPlaylistUpdateManyWithoutPlaylistInput {
  connect: [CompletedPlaylistWhereUniqueInput!]
  create: [CompletedPlaylistCreateWithoutPlaylistInput!]
  delete: [CompletedPlaylistWhereUniqueInput!]
  deleteMany: [CompletedPlaylistScalarWhereInput!]
  disconnect: [CompletedPlaylistWhereUniqueInput!]
  set: [CompletedPlaylistWhereUniqueInput!]
  update: [CompletedPlaylistUpdateWithWhereUniqueWithoutPlaylistInput!]
  updateMany: [CompletedPlaylistUpdateManyWithWhereNestedInput!]
  upsert: [CompletedPlaylistUpsertWithWhereUniqueWithoutPlaylistInput!]
}

input CompletedPlaylistUpdateManyWithWhereNestedInput {
  data: CompletedPlaylistUpdateManyDataInput!
  where: CompletedPlaylistScalarWhereInput!
}

input CompletedPlaylistUpdateWithoutCompletedByDataInput {
  createdAt: DateTime
  id: ID
  playlist: PlaylistUpdateOneRequiredWithoutCompletedPlaylistsInput
  updatedAt: DateTime
}

input CompletedPlaylistUpdateWithoutPlaylistDataInput {
  completedBy: UserUpdateOneRequiredWithoutCompletedPlaylistsInput
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input CompletedPlaylistUpdateWithWhereUniqueWithoutCompletedByInput {
  data: CompletedPlaylistUpdateWithoutCompletedByDataInput!
  where: CompletedPlaylistWhereUniqueInput!
}

input CompletedPlaylistUpdateWithWhereUniqueWithoutPlaylistInput {
  data: CompletedPlaylistUpdateWithoutPlaylistDataInput!
  where: CompletedPlaylistWhereUniqueInput!
}

input CompletedPlaylistUpsertWithWhereUniqueWithoutCompletedByInput {
  create: CompletedPlaylistCreateWithoutCompletedByInput!
  update: CompletedPlaylistUpdateWithoutCompletedByDataInput!
  where: CompletedPlaylistWhereUniqueInput!
}

input CompletedPlaylistUpsertWithWhereUniqueWithoutPlaylistInput {
  create: CompletedPlaylistCreateWithoutPlaylistInput!
  update: CompletedPlaylistUpdateWithoutPlaylistDataInput!
  where: CompletedPlaylistWhereUniqueInput!
}

input CompletedPlaylistWhereInput {
  AND: [CompletedPlaylistWhereInput!]
  completedBy: UserWhereInput
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [CompletedPlaylistWhereInput!]
  OR: [CompletedPlaylistWhereInput!]
  playlist: PlaylistWhereInput
  updatedAt: DateTimeFilter
}

input CompletedPlaylistWhereUniqueInput {
  id: ID
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input EnrolledPlayListCreateManyWithoutEnrolledPlaylistsInput {
  connect: [EnrolledPlayListWhereUniqueInput!]
  create: [EnrolledPlayListCreateWithoutEnrolleeInput!]
}

input EnrolledPlayListCreateManyWithoutEnrolledPlayListsInput {
  connect: [EnrolledPlayListWhereUniqueInput!]
  create: [EnrolledPlayListCreateWithoutPlaylistInput!]
}

input EnrolledPlayListCreateWithoutEnrolleeInput {
  createdAt: DateTime
  id: ID
  playlist: PlaylistCreateOneWithoutPlaylistInput!
  updatedAt: DateTime
}

input EnrolledPlayListCreateWithoutPlaylistInput {
  createdAt: DateTime
  enrollee: UserCreateOneWithoutEnrolleeInput!
  id: ID
  updatedAt: DateTime
}

input EnrolledPlayListFilter {
  every: EnrolledPlayListWhereInput
  none: EnrolledPlayListWhereInput
  some: EnrolledPlayListWhereInput
}

input EnrolledPlayListScalarWhereInput {
  AND: [EnrolledPlayListScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  NOT: [EnrolledPlayListScalarWhereInput!]
  OR: [EnrolledPlayListScalarWhereInput!]
  updatedAt: DateTimeFilter
}

input EnrolledPlayListUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
}

input EnrolledPlayListUpdateManyWithoutEnrolleeInput {
  connect: [EnrolledPlayListWhereUniqueInput!]
  create: [EnrolledPlayListCreateWithoutEnrolleeInput!]
  delete: [EnrolledPlayListWhereUniqueInput!]
  deleteMany: [EnrolledPlayListScalarWhereInput!]
  disconnect: [EnrolledPlayListWhereUniqueInput!]
  set: [EnrolledPlayListWhereUniqueInput!]
  update: [EnrolledPlayListUpdateWithWhereUniqueWithoutEnrolleeInput!]
  updateMany: [EnrolledPlayListUpdateManyWithWhereNestedInput!]
  upsert: [EnrolledPlayListUpsertWithWhereUniqueWithoutEnrolleeInput!]
}

input EnrolledPlayListUpdateManyWithoutPlaylistInput {
  connect: [EnrolledPlayListWhereUniqueInput!]
  create: [EnrolledPlayListCreateWithoutPlaylistInput!]
  delete: [EnrolledPlayListWhereUniqueInput!]
  deleteMany: [EnrolledPlayListScalarWhereInput!]
  disconnect: [EnrolledPlayListWhereUniqueInput!]
  set: [EnrolledPlayListWhereUniqueInput!]
  update: [EnrolledPlayListUpdateWithWhereUniqueWithoutPlaylistInput!]
  updateMany: [EnrolledPlayListUpdateManyWithWhereNestedInput!]
  upsert: [EnrolledPlayListUpsertWithWhereUniqueWithoutPlaylistInput!]
}

input EnrolledPlayListUpdateManyWithWhereNestedInput {
  data: EnrolledPlayListUpdateManyDataInput!
  where: EnrolledPlayListScalarWhereInput!
}

input EnrolledPlayListUpdateWithoutEnrolleeDataInput {
  createdAt: DateTime
  id: ID
  playlist: PlaylistUpdateOneRequiredWithoutEnrolledPlayListsInput
  updatedAt: DateTime
}

input EnrolledPlayListUpdateWithoutPlaylistDataInput {
  createdAt: DateTime
  enrollee: UserUpdateOneRequiredWithoutEnrolledPlaylistsInput
  id: ID
  updatedAt: DateTime
}

input EnrolledPlayListUpdateWithWhereUniqueWithoutEnrolleeInput {
  data: EnrolledPlayListUpdateWithoutEnrolleeDataInput!
  where: EnrolledPlayListWhereUniqueInput!
}

input EnrolledPlayListUpdateWithWhereUniqueWithoutPlaylistInput {
  data: EnrolledPlayListUpdateWithoutPlaylistDataInput!
  where: EnrolledPlayListWhereUniqueInput!
}

input EnrolledPlayListUpsertWithWhereUniqueWithoutEnrolleeInput {
  create: EnrolledPlayListCreateWithoutEnrolleeInput!
  update: EnrolledPlayListUpdateWithoutEnrolleeDataInput!
  where: EnrolledPlayListWhereUniqueInput!
}

input EnrolledPlayListUpsertWithWhereUniqueWithoutPlaylistInput {
  create: EnrolledPlayListCreateWithoutPlaylistInput!
  update: EnrolledPlayListUpdateWithoutPlaylistDataInput!
  where: EnrolledPlayListWhereUniqueInput!
}

input EnrolledPlayListWhereInput {
  AND: [EnrolledPlayListWhereInput!]
  createdAt: DateTimeFilter
  enrollee: UserWhereInput
  id: StringFilter
  NOT: [EnrolledPlayListWhereInput!]
  OR: [EnrolledPlayListWhereInput!]
  playlist: PlaylistWhereInput
  updatedAt: DateTimeFilter
}

input EnrolledPlayListWhereUniqueInput {
  id: ID
}

type Mutation {
  createOnePlaylist(data: PlaylistCreateInput!): Playlist!
  deleteOnePlaylist(where: PlaylistWhereUniqueInput!): Playlist
  login(email: String, password: String): AuthPayload!
  logout: AuthPayload!
  publishPlaylist(id: ID): Playlist
  signup(displayName: String, email: String, password: String): AuthPayload!
  updateOnePlaylist(
    data: PlaylistUpdateInput!
    where: PlaylistWhereUniqueInput!
  ): Playlist
}

input NullableFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input NullableStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type Playlist {
  author: User!
  createdAt: DateTime!
  description: String
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PlaylistCategoryCreateManyWithoutCategoriesInput {
  connect: [PlaylistCategoryWhereUniqueInput!]
  create: [PlaylistCategoryCreateWithoutPlaylistsInput!]
}

input PlaylistCategoryCreateWithoutPlaylistsInput {
  createdByRole: Role
  description: String
  id: ID
  name: String!
}

input PlaylistCategoryFilter {
  every: PlaylistCategoryWhereInput
  none: PlaylistCategoryWhereInput
  some: PlaylistCategoryWhereInput
}

input PlaylistCategoryScalarWhereInput {
  AND: [PlaylistCategoryScalarWhereInput!]
  createdByRole: Role
  description: NullableStringFilter
  id: StringFilter
  name: StringFilter
  NOT: [PlaylistCategoryScalarWhereInput!]
  OR: [PlaylistCategoryScalarWhereInput!]
  playlists: PlaylistFilter
}

input PlaylistCategoryUpdateManyDataInput {
  createdByRole: Role
  description: String
  id: ID
  name: String
}

input PlaylistCategoryUpdateManyWithoutPlaylistsInput {
  connect: [PlaylistCategoryWhereUniqueInput!]
  create: [PlaylistCategoryCreateWithoutPlaylistsInput!]
  delete: [PlaylistCategoryWhereUniqueInput!]
  deleteMany: [PlaylistCategoryScalarWhereInput!]
  disconnect: [PlaylistCategoryWhereUniqueInput!]
  set: [PlaylistCategoryWhereUniqueInput!]
  update: [PlaylistCategoryUpdateWithWhereUniqueWithoutPlaylistsInput!]
  updateMany: [PlaylistCategoryUpdateManyWithWhereNestedInput!]
  upsert: [PlaylistCategoryUpsertWithWhereUniqueWithoutPlaylistsInput!]
}

input PlaylistCategoryUpdateManyWithWhereNestedInput {
  data: PlaylistCategoryUpdateManyDataInput!
  where: PlaylistCategoryScalarWhereInput!
}

input PlaylistCategoryUpdateWithoutPlaylistsDataInput {
  createdByRole: Role
  description: String
  id: ID
  name: String
}

input PlaylistCategoryUpdateWithWhereUniqueWithoutPlaylistsInput {
  data: PlaylistCategoryUpdateWithoutPlaylistsDataInput!
  where: PlaylistCategoryWhereUniqueInput!
}

input PlaylistCategoryUpsertWithWhereUniqueWithoutPlaylistsInput {
  create: PlaylistCategoryCreateWithoutPlaylistsInput!
  update: PlaylistCategoryUpdateWithoutPlaylistsDataInput!
  where: PlaylistCategoryWhereUniqueInput!
}

input PlaylistCategoryWhereInput {
  AND: [PlaylistCategoryWhereInput!]
  createdByRole: Role
  description: NullableStringFilter
  id: StringFilter
  name: StringFilter
  NOT: [PlaylistCategoryWhereInput!]
  OR: [PlaylistCategoryWhereInput!]
  playlists: PlaylistFilter
}

input PlaylistCategoryWhereUniqueInput {
  id: ID
}

input PlaylistCreateInput {
  articles: ArticleCreateManyWithoutArticlesInput
  author: UserCreateOneWithoutAuthorInput!
  categories: PlaylistCategoryCreateManyWithoutCategoriesInput
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListCreateManyWithoutEnrolledPlayListsInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input PlaylistCreateManyWithoutPlaylistsInput {
  connect: [PlaylistWhereUniqueInput!]
  create: [PlaylistCreateWithoutAuthorInput!]
}

input PlaylistCreateOneWithoutPlaylistInput {
  connect: PlaylistWhereUniqueInput
  create: PlaylistCreateWithoutEnrolledPlayListsInput
}

input PlaylistCreateWithoutArticlesInput {
  author: UserCreateOneWithoutAuthorInput!
  categories: PlaylistCategoryCreateManyWithoutCategoriesInput
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListCreateManyWithoutEnrolledPlayListsInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input PlaylistCreateWithoutAuthorInput {
  articles: ArticleCreateManyWithoutArticlesInput
  categories: PlaylistCategoryCreateManyWithoutCategoriesInput
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListCreateManyWithoutEnrolledPlayListsInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input PlaylistCreateWithoutCompletedPlaylistsInput {
  articles: ArticleCreateManyWithoutArticlesInput
  author: UserCreateOneWithoutAuthorInput!
  categories: PlaylistCategoryCreateManyWithoutCategoriesInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListCreateManyWithoutEnrolledPlayListsInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input PlaylistCreateWithoutEnrolledPlayListsInput {
  articles: ArticleCreateManyWithoutArticlesInput
  author: UserCreateOneWithoutAuthorInput!
  categories: PlaylistCategoryCreateManyWithoutCategoriesInput
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  description: String
  emoji: String
  id: ID
  published: Boolean
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input PlaylistFilter {
  every: PlaylistWhereInput
  none: PlaylistWhereInput
  some: PlaylistWhereInput
}

input PlaylistScalarWhereInput {
  AND: [PlaylistScalarWhereInput!]
  articles: ArticleFilter
  categories: PlaylistCategoryFilter
  completedPlaylists: CompletedPlaylistFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  emoji: NullableStringFilter
  enrolledPlayLists: EnrolledPlayListFilter
  id: StringFilter
  NOT: [PlaylistScalarWhereInput!]
  OR: [PlaylistScalarWhereInput!]
  published: BooleanFilter
  thumbnail: NullableStringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PlaylistUpdateInput {
  articles: ArticleUpdateManyWithoutPlaylistInput
  author: UserUpdateOneRequiredWithoutPlaylistsInput
  categories: PlaylistCategoryUpdateManyWithoutPlaylistsInput
  completedPlaylists: CompletedPlaylistUpdateManyWithoutPlaylistInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListUpdateManyWithoutPlaylistInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input PlaylistUpdateManyDataInput {
  createdAt: DateTime
  description: String
  emoji: String
  id: ID
  published: Boolean
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input PlaylistUpdateManyWithoutAuthorInput {
  connect: [PlaylistWhereUniqueInput!]
  create: [PlaylistCreateWithoutAuthorInput!]
  delete: [PlaylistWhereUniqueInput!]
  deleteMany: [PlaylistScalarWhereInput!]
  disconnect: [PlaylistWhereUniqueInput!]
  set: [PlaylistWhereUniqueInput!]
  update: [PlaylistUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PlaylistUpdateManyWithWhereNestedInput!]
  upsert: [PlaylistUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PlaylistUpdateManyWithWhereNestedInput {
  data: PlaylistUpdateManyDataInput!
  where: PlaylistScalarWhereInput!
}

input PlaylistUpdateOneRequiredWithoutArticlesInput {
  connect: PlaylistWhereUniqueInput
  create: PlaylistCreateWithoutArticlesInput
  update: PlaylistUpdateWithoutArticlesDataInput
  upsert: PlaylistUpsertWithoutArticlesInput
}

input PlaylistUpdateOneRequiredWithoutCompletedPlaylistsInput {
  connect: PlaylistWhereUniqueInput
  create: PlaylistCreateWithoutCompletedPlaylistsInput
  update: PlaylistUpdateWithoutCompletedPlaylistsDataInput
  upsert: PlaylistUpsertWithoutCompletedPlaylistsInput
}

input PlaylistUpdateOneRequiredWithoutEnrolledPlayListsInput {
  connect: PlaylistWhereUniqueInput
  create: PlaylistCreateWithoutEnrolledPlayListsInput
  update: PlaylistUpdateWithoutEnrolledPlayListsDataInput
  upsert: PlaylistUpsertWithoutEnrolledPlayListsInput
}

input PlaylistUpdateWithoutArticlesDataInput {
  author: UserUpdateOneRequiredWithoutPlaylistsInput
  categories: PlaylistCategoryUpdateManyWithoutPlaylistsInput
  completedPlaylists: CompletedPlaylistUpdateManyWithoutPlaylistInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListUpdateManyWithoutPlaylistInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input PlaylistUpdateWithoutAuthorDataInput {
  articles: ArticleUpdateManyWithoutPlaylistInput
  categories: PlaylistCategoryUpdateManyWithoutPlaylistsInput
  completedPlaylists: CompletedPlaylistUpdateManyWithoutPlaylistInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListUpdateManyWithoutPlaylistInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input PlaylistUpdateWithoutCompletedPlaylistsDataInput {
  articles: ArticleUpdateManyWithoutPlaylistInput
  author: UserUpdateOneRequiredWithoutPlaylistsInput
  categories: PlaylistCategoryUpdateManyWithoutPlaylistsInput
  createdAt: DateTime
  description: String
  emoji: String
  enrolledPlayLists: EnrolledPlayListUpdateManyWithoutPlaylistInput
  id: ID
  published: Boolean
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input PlaylistUpdateWithoutEnrolledPlayListsDataInput {
  articles: ArticleUpdateManyWithoutPlaylistInput
  author: UserUpdateOneRequiredWithoutPlaylistsInput
  categories: PlaylistCategoryUpdateManyWithoutPlaylistsInput
  completedPlaylists: CompletedPlaylistUpdateManyWithoutPlaylistInput
  createdAt: DateTime
  description: String
  emoji: String
  id: ID
  published: Boolean
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input PlaylistUpdateWithWhereUniqueWithoutAuthorInput {
  data: PlaylistUpdateWithoutAuthorDataInput!
  where: PlaylistWhereUniqueInput!
}

input PlaylistUpsertWithoutArticlesInput {
  create: PlaylistCreateWithoutArticlesInput!
  update: PlaylistUpdateWithoutArticlesDataInput!
}

input PlaylistUpsertWithoutCompletedPlaylistsInput {
  create: PlaylistCreateWithoutCompletedPlaylistsInput!
  update: PlaylistUpdateWithoutCompletedPlaylistsDataInput!
}

input PlaylistUpsertWithoutEnrolledPlayListsInput {
  create: PlaylistCreateWithoutEnrolledPlayListsInput!
  update: PlaylistUpdateWithoutEnrolledPlayListsDataInput!
}

input PlaylistUpsertWithWhereUniqueWithoutAuthorInput {
  create: PlaylistCreateWithoutAuthorInput!
  update: PlaylistUpdateWithoutAuthorDataInput!
  where: PlaylistWhereUniqueInput!
}

input PlaylistWhereInput {
  AND: [PlaylistWhereInput!]
  articles: ArticleFilter
  author: UserWhereInput
  categories: PlaylistCategoryFilter
  completedPlaylists: CompletedPlaylistFilter
  createdAt: DateTimeFilter
  description: NullableStringFilter
  emoji: NullableStringFilter
  enrolledPlayLists: EnrolledPlayListFilter
  id: StringFilter
  NOT: [PlaylistWhereInput!]
  OR: [PlaylistWhereInput!]
  published: BooleanFilter
  thumbnail: NullableStringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PlaylistWhereUniqueInput {
  id: ID
}

type Query {
  me: User
  playlist(where: PlaylistWhereUniqueInput!): Playlist
  playlists(
    after: ID
    before: ID
    first: Int
    last: Int
    skip: Int
    where: PlaylistWhereInput
  ): [Playlist!]!
}

enum Role {
  ADMIN
  USER
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  displayName: String
  email: String!
  id: ID!
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPlaylistsInput
}

input UserCreateOneWithoutCompletedByInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCompletedPlaylistsInput
}

input UserCreateOneWithoutEnrolleeInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEnrolledPlaylistsInput
}

input UserCreateWithoutArticlesInput {
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  displayName: String
  email: String!
  enrolledPlaylists: EnrolledPlayListCreateManyWithoutEnrolledPlaylistsInput
  googleId: String
  id: ID
  password: String!
  playlists: PlaylistCreateManyWithoutPlaylistsInput
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserCreateWithoutCompletedPlaylistsInput {
  articles: ArticleCreateManyWithoutArticlesInput
  createdAt: DateTime
  displayName: String
  email: String!
  enrolledPlaylists: EnrolledPlayListCreateManyWithoutEnrolledPlaylistsInput
  googleId: String
  id: ID
  password: String!
  playlists: PlaylistCreateManyWithoutPlaylistsInput
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserCreateWithoutEnrolledPlaylistsInput {
  articles: ArticleCreateManyWithoutArticlesInput
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  displayName: String
  email: String!
  googleId: String
  id: ID
  password: String!
  playlists: PlaylistCreateManyWithoutPlaylistsInput
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserCreateWithoutPlaylistsInput {
  articles: ArticleCreateManyWithoutArticlesInput
  completedPlaylists: CompletedPlaylistCreateManyWithoutCompletedPlaylistsInput
  createdAt: DateTime
  displayName: String
  email: String!
  enrolledPlaylists: EnrolledPlayListCreateManyWithoutEnrolledPlaylistsInput
  googleId: String
  id: ID
  password: String!
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserUpdateOneRequiredWithoutArticlesInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutArticlesInput
  update: UserUpdateWithoutArticlesDataInput
  upsert: UserUpsertWithoutArticlesInput
}

input UserUpdateOneRequiredWithoutCompletedPlaylistsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCompletedPlaylistsInput
  update: UserUpdateWithoutCompletedPlaylistsDataInput
  upsert: UserUpsertWithoutCompletedPlaylistsInput
}

input UserUpdateOneRequiredWithoutEnrolledPlaylistsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutEnrolledPlaylistsInput
  update: UserUpdateWithoutEnrolledPlaylistsDataInput
  upsert: UserUpsertWithoutEnrolledPlaylistsInput
}

input UserUpdateOneRequiredWithoutPlaylistsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPlaylistsInput
  update: UserUpdateWithoutPlaylistsDataInput
  upsert: UserUpsertWithoutPlaylistsInput
}

input UserUpdateWithoutArticlesDataInput {
  completedPlaylists: CompletedPlaylistUpdateManyWithoutCompletedByInput
  createdAt: DateTime
  displayName: String
  email: String
  enrolledPlaylists: EnrolledPlayListUpdateManyWithoutEnrolleeInput
  googleId: String
  id: ID
  password: String
  playlists: PlaylistUpdateManyWithoutAuthorInput
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserUpdateWithoutCompletedPlaylistsDataInput {
  articles: ArticleUpdateManyWithoutAuthorInput
  createdAt: DateTime
  displayName: String
  email: String
  enrolledPlaylists: EnrolledPlayListUpdateManyWithoutEnrolleeInput
  googleId: String
  id: ID
  password: String
  playlists: PlaylistUpdateManyWithoutAuthorInput
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserUpdateWithoutEnrolledPlaylistsDataInput {
  articles: ArticleUpdateManyWithoutAuthorInput
  completedPlaylists: CompletedPlaylistUpdateManyWithoutCompletedByInput
  createdAt: DateTime
  displayName: String
  email: String
  googleId: String
  id: ID
  password: String
  playlists: PlaylistUpdateManyWithoutAuthorInput
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserUpdateWithoutPlaylistsDataInput {
  articles: ArticleUpdateManyWithoutAuthorInput
  completedPlaylists: CompletedPlaylistUpdateManyWithoutCompletedByInput
  createdAt: DateTime
  displayName: String
  email: String
  enrolledPlaylists: EnrolledPlayListUpdateManyWithoutEnrolleeInput
  googleId: String
  id: ID
  password: String
  resetToken: String
  resetTokenExpiry: Float
  role: Role
}

input UserUpsertWithoutArticlesInput {
  create: UserCreateWithoutArticlesInput!
  update: UserUpdateWithoutArticlesDataInput!
}

input UserUpsertWithoutCompletedPlaylistsInput {
  create: UserCreateWithoutCompletedPlaylistsInput!
  update: UserUpdateWithoutCompletedPlaylistsDataInput!
}

input UserUpsertWithoutEnrolledPlaylistsInput {
  create: UserCreateWithoutEnrolledPlaylistsInput!
  update: UserUpdateWithoutEnrolledPlaylistsDataInput!
}

input UserUpsertWithoutPlaylistsInput {
  create: UserCreateWithoutPlaylistsInput!
  update: UserUpdateWithoutPlaylistsDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  articles: ArticleFilter
  completedPlaylists: CompletedPlaylistFilter
  createdAt: DateTimeFilter
  displayName: NullableStringFilter
  email: StringFilter
  enrolledPlaylists: EnrolledPlayListFilter
  googleId: NullableStringFilter
  id: StringFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  password: StringFilter
  playlists: PlaylistFilter
  resetToken: NullableStringFilter
  resetTokenExpiry: NullableFloatFilter
  role: Role
}

input UserWhereUniqueInput {
  email: String
  googleId: String
  id: ID
}
